from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import pandas as pd
import os
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
reviews_db = pd.DataFrame(columns=["user_id", "user_name", "rating", "text"])
users_db = pd.DataFrame(columns=["user_id", "referral_code", "bonus_points"])

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    args = context.args

    if args and args[0].startswith("ref"):
        referrer_id = int(args[0][3:])
        users_db.loc[len(users_db)] = [user.id, f"ref{referrer_id}", 0]
        await update.message.reply_text("üéâ –í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥—Ä—É–≥–∞! –û–Ω –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.")

    keyboard = [
        [InlineKeyboardButton("üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")]
    ]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω—é!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è ---
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("60¬∞C", callback_data="quiz_60")],
        [InlineKeyboardButton("80¬∞C", callback_data="quiz_80")],
        [InlineKeyboardButton("100¬∞C", callback_data="quiz_100")]
    ]
    await query.edit_message_text(
        "üéâ –£–≥–∞–¥–∞–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–∞—Ä–Ω–æ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    answer = query.data.split("_")[1]

    if answer == "80":
        await query.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: BANIA15 (—Å–∫–∏–¥–∫–∞ 15%)")
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–≥–∞–¥–∞–ª–∏! –í–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥: BANIA5")

# --- –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ ---
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(star, callback_data=f"rate_{i+1}")] 
        for i, star in enumerate(["‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"])
    ]
    await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –≤–∏–∑–∏—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    rating = int(query.data.split("_")[1])
    user = query.from_user

    global reviews_db
    reviews_db.loc[len(reviews_db)] = [user.id, user.first_name, rating, ""]
    
    if rating >= 4:
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–º (–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫!)")
        context.user_data["waiting_feedback"] = True
    else:
        await query.edit_message_text("–ß—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫? –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
        context.user_data["waiting_feedback"] = True

async def save_text_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_feedback"):
        text = update.message.text
        user = update.message.from_user
        
        reviews_db.loc[reviews_db["user_id"] == user.id, "text"] = text
        reviews_db.to_excel("reviews.xlsx")
        
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        context.user_data["waiting_feedback"] = False

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(quiz, pattern="^quiz$"))
    app.add_handler(CallbackQueryHandler(handle_quiz_answer, pattern="^quiz_"))
    app.add_handler(CallbackQueryHandler(feedback, pattern="^feedback$"))
    app.add_handler(CallbackQueryHandler(handle_rating, pattern="^rate_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_text_review))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
